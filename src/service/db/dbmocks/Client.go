// Code generated by mockery v1.0.0. DO NOT EDIT.

package dbmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/Foundation-13/mwarehouse/src/service/types"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: ctx, key, fileName
func (_m *Client) CreateJob(ctx context.Context, key string, fileName string) (*types.Job, error) {
	ret := _m.Called(ctx, key, fileName)

	var r0 *types.Job
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Job); ok {
		r0 = rf(ctx, key, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, key, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobStatus provides a mock function with given fields: ctx, key
func (_m *Client) GetJobStatus(ctx context.Context, key string) (types.JobStatus, error) {
	ret := _m.Called(ctx, key)

	var r0 types.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) types.JobStatus); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(types.JobStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
