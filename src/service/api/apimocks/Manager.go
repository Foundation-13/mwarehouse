// Code generated by mockery v1.0.0. DO NOT EDIT.

package apimocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	types "github.com/Foundation-13/mwarehouse/src/service/types"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GetJobStatus provides a mock function with given fields: ctx, key
func (_m *Manager) GetJobStatus(ctx context.Context, key string) (types.Job, error) {
	ret := _m.Called(ctx, key)

	var r0 types.Job
	if rf, ok := ret.Get(0).(func(context.Context, string) types.Job); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(types.Job)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessMedia provides a mock function with given fields: ctx, key, filters
func (_m *Manager) ProcessMedia(ctx context.Context, key string, filters types.Filters) error {
	ret := _m.Called(ctx, key, filters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Filters) error); ok {
		r0 = rf(ctx, key, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadMedia provides a mock function with given fields: ctx, r, fileName
func (_m *Manager) UploadMedia(ctx context.Context, r io.Reader, fileName string) (string, error) {
	ret := _m.Called(ctx, r, fileName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) string); ok {
		r0 = rf(ctx, r, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, string) error); ok {
		r1 = rf(ctx, r, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
